#include <vector>
#include <TH1D.h>
#include <TLorentzVector.h>
#include <TFile.h>
#include <TTree.h>
#include <TSystem.h>
#include <TMath.h>
#include <TH1.h>
#include <TH1F.h>
#include <TH2.h>
#include <TH2F.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TLegend.h>
using namespace std;
#include <iostream>
#include <TProfile.h>

#include "untuplizer.h"
#include "TTreeReader.h"
#include "TTreeReaderValue.h"
#include "TTreeReaderArray.h"
#include "IsoCorrection.h"
#include "PhotonSelection.h"

Double_t deltaPhi(Double_t phi1, Double_t phi2) {
  Double_t dPhi = phi1 - phi2;
  if (dPhi > TMath::Pi()) dPhi -= 2.*TMath::Pi();
  if (dPhi < -TMath::Pi()) dPhi += 2.*TMath::Pi();
  return dPhi;
}

Double_t deltaR(Double_t eta1, Double_t phi1, Double_t eta2, Double_t phi2) {
  Double_t dEta, dPhi ;
  dEta = eta1 - eta2;
  dPhi = deltaPhi(phi1, phi2);
  return sqrt(dEta*dEta+dPhi*dPhi);
}

void xZg(char* pathes){
  //***********************Initialization***********************//

  //access EventTree with TreeReader class
  TreeReader data(pathes);
  //create an output .root file
  TFile *fout_;
  fout_ = new TFile("output_ggtree_mc.root","RECREATE");

  //create histograms in output .root file
  TH1F *h_npho = new TH1F("h_npho", "n pho", 10, 0., 10);
  TH1F *h_nmcpho = new TH1F("h_nmcpho", "n mcpho", 10, 0., 10);
  TH1F *h_matchpho = new TH1F("h_matchpho", "n matchpho", 10, 0., 10);
  TH1F *h_dr_pho = new TH1F("h_dr_pho", "dr of photon", 100, 0., 0.2);
  TH1F *h_dpt_pho = new TH1F("h_dpt_pho", "dpt of photon", 100, 0., 1);
  TH2F *h_dptdr_pho = new TH2F("h_dptdr_pho", "dptdr of photon", 100, 0., 1, 100, 0., 2);

  h_dr_pho->Sumw2();
  h_dpt_pho->Sumw2();
  h_dptdr_pho->Sumw2();

  Double_t ptcut[30] = {22, 30, 36, 50, 75, 90, 120, 170, 175, 180, 185, 190, 200,
		     210, 220, 230, 250, 300, 350, 400, 500, 750, 1000, 1500, 2000, 3000, 10000};//24 bins, 2016
  Double_t etabin[10] = {-1.566, -1.4442, -0.8, 0, 0.8, 1.4442, 1.566};//6bins

  TH1F *h_realphoEB_pt_var = new TH1F("h_realphoEB_pt_var", "gen-matched pho pt of EB varbins", 24, ptcut);
  TH1F *h_realphoEB_pt_L_var = new TH1F("h_realphoEB_pt_L_var", "gen-matched pho pt of EB with L-cut varbins", 24, ptcut);
  TH1F *h_realphoEB_pt_M_var = new TH1F("h_realphoEB_pt_M_var", "gen-matched pho pt of EB with M-cut varbins", 24, ptcut);
  TH1F *h_realphoEB_pt_T_var = new TH1F("h_realphoEB_pt_T_var", "gen-matched pho pt of EB with T-cut varbins", 24, ptcut);

  TH1F *h_realphoEB_pt_Lswp_var = new TH1F("h_realphoEB_pt_Lswp_var", "gen-matched pho pt of EB with L-selection varbins", 24, ptcut);
  TH1F *h_realphoEB_pt_Mswp_var = new TH1F("h_realphoEB_pt_Mswp_var", "gen-matched pho pt of EB with M-selection varbins", 24, ptcut);
  TH1F *h_realphoEB_pt_Tswp_var = new TH1F("h_realphoEB_pt_Tswp_var", "gen-matched pho pt of EB with T-selection varbins", 24, ptcut);
  
  TH1F *h_realphoEB_eta_var = new TH1F("h_realphoEB_eta_var", "genmatched pho eta of EB varbins", 6, etabin);
  TH1F *h_realphoEB_eta_L_var = new TH1F("h_realphoEB_eta_L_var", "gen-matched phoeta of EB with L-cut varbins", 6, etabin);
  TH1F *h_realphoEB_eta_M_var = new TH1F("h_realphoEB_eta_M_var", "gen-matched phoeta of EB with M-cut varbins", 6, etabin);
  TH1F *h_realphoEB_eta_T_var = new TH1F("h_realphoEB_eta_T_var", "gen-matched phoeta of EB with T-cut varbins", 6, etabin);
  TH1F *h_nrealphoEB = new TH1F("h_nrealphoEB", "n realpho of EB", 10, 0, 10);
  TH1F *h_nrealphoEB_M = new TH1F("h_nrealphoEB_M", "n realpho of EB after cuts", 10, 0, 10);

  TH1F *h_genMET = new TH1F("h_genMET", "gen MET", 24, ptcut);
  TH1F *h_genMETPhi = new TH1F("h_genMETPhi", "gen MET Phi", 8, -3.14, 3.14);
  TH1F *h_MET = new TH1F("h_MET", "pf MET", 24, ptcut);
  TH1F *h_METPhi = new TH1F("h_METPhi", "pf MET Phi", 8, -3.14, 3.14);
  TH1F *h_dphoMETPhi = new TH1F("h_dphoMETPhi", "deltaPhi of matched pho and MET", 8, -3.14, 3.14);
  
  /*
  TH1F *h_realphoEB_sieie = new TH1F("h_realphoEB_sieie", "gen-matched pho sieie of EB varbins", 80, 0., 0.02);
  TH1F *h_realphoEB_sieie_L = new TH1F("h_realphoEB_sieie_L", "gen-matched pho sieie of EB with L-cut varbins", 80, 0., 0.02);
  TH1F *h_realphoEB_sieie_M = new TH1F("h_realphoEB_sieie_M", "gen-matched pho sieie of EB with M-cut varbins", 80, 0., 0.02);
  TH1F *h_realphoEB_sieie_T = new TH1F("h_realphoEB_sieie_T", "gen-matched pho sieie of EB with T-cut varbins", 80, 0., 0.02);
  */
  h_realphoEB_pt_var->Sumw2();
  h_realphoEB_pt_L_var->Sumw2();
  h_realphoEB_pt_M_var->Sumw2();
  h_realphoEB_pt_T_var->Sumw2();

  h_realphoEB_eta_var->Sumw2();
  h_realphoEB_eta_L_var->Sumw2();
  h_realphoEB_eta_M_var->Sumw2();
  h_realphoEB_eta_T_var->Sumw2();

  //define branch variables
  Bool_t   isData, isPVGood;
  Int_t    run;
  Long64_t event;
  Int_t nVtx;
  Float_t npho_, nmcpho_, matchpho_;
  
  //Float_t recophoEt, recophoEta, recophoPhi, mcphoEt, mcphoEta, mcphoPhi, realphoEt, realphoEta, realphoPhi;
  //Float_t chIso_, phoIso_, nhIso_, chWorst_;
  //Float_t chIsoEB_L, chIsoEB_M, chIsoEB_T, phoIsoEB_L, phoIsoEB_M, phoIsoEB_T, nhIsoEB_L, nhIsoEB_M, nhIsoEB_T;
  Float_t mcphoEt, mcphoEta, mcphoPhi, realphoEt, realphoEta, realphoPhi;
  Float_t HoverE, sieie, chIso, phoIso, nhIso, chWorst, eleVeto, rho;
  Float_t chIso_, phoIso_, nhIso_, chWorst_;
  Float_t sieieFull5x5, sieipFull5x5, sipipFull5x5, r9Full5x5;
  Float_t HoverE_Mwp, chIso_Mwp, phoIso_Mwp, nhIso_Mwp, chWorst_Mwp;
  Float_t sieieFull5x5_Mwp, sieipFull5x5_Mwp, sipipFull5x5_Mwp, r9Full5x5_Mwp;
  //Float_t HoverE_Lwp, sieieFull5x5_Lwp, chIso_Lwp, phoIso_Lwp, nhIso_Lwp;
  //Float_t HoverE_Mwp, r9Full5x5_Mwp, sieieFull5x5_Mwp, chIso_Mwp, phoIso_Mwp, nhIso_Mwp, chWorst_Mwp;
  //Float_t HoverE_Twp, sieieFull5x5_Twp, chIso_Twp, phoIso_Twp, nhIso_Twp;
  //Float_t HoverE_Lswp, sieieFull5x5_Lswp, chIso_Lswp, phoIso_Lswp, nhIso_Lswp;
  //Float_t HoverE_Mswp, sieieFull5x5_Mswp, chIso_Mswp, phoIso_Mswp, nhIso_Mswp;
  //Float_t HoverE_Tswp, sieieFull5x5_Tswp, chIso_Tswp, phoIso_Tswp, nhIso_Tswp;
   TTree *outtree_;
  outtree_ = new TTree("t", "mini tree");
  
  outtree_->Branch("run", &run, "run/I");
  outtree_->Branch("event", &event, "event/L");
     
  //outtree_->Branch("recophoEt",   &recophoEt, "recophoEt/F");
  //outtree_->Branch("recophoEta",  &recophoEta, "recophoEta/F");
  //outtree_->Branch("recophoPhi",  &recophoPhi, "recophoPhi/F");
  outtree_->Branch("mcphoEt",     &mcphoEt, "mcphoEt/F");
  outtree_->Branch("mcphoEta",    &mcphoEta, "mcphoEta/F");
  outtree_->Branch("mcphoPhi",    &mcphoPhi, "mcphoPhi/F");
  outtree_->Branch("realphoEt",   &realphoEt, "realphoEt/F");
  outtree_->Branch("realphoEta",  &realphoEta, "realphoEta/F");
  outtree_->Branch("realphoPhi",  &realphoPhi, "realphoPhi/F");
  
  outtree_->Branch("eleVeto",     &eleVeto,      "eleVeto/I");
  outtree_->Branch("HoverE",      &HoverE,       "HoverE/F");
  outtree_->Branch("chIso",       &chIso,        "chIso/F");
  outtree_->Branch("phoIso",      &phoIso,       "phoIso/F");
  outtree_->Branch("nhIso",       &nhIso,        "nhIso/F");
  outtree_->Branch("chWorst",     &chWorst,      "chWorst/F");
  outtree_->Branch("chIso_rc",    &chIso_,       "chIso_rc/F");
  outtree_->Branch("phoIso_rc",   &phoIso_,      "phoIso_rc/F");
  outtree_->Branch("nhIso_rc",    &nhIso_,       "nhIso_rc/F");
  outtree_->Branch("chWorst_rc",  &chWorst_,     "chWorst_rc/F");
  
  outtree_->Branch("sieieFull5x5",        &sieieFull5x5,        "sieieFull5x5/F");
  outtree_->Branch("sieipFull5x5",        &sieipFull5x5,        "sieipFull5x5/F");
  outtree_->Branch("sipipFull5x5",        &sipipFull5x5,        "sipipFull5x5/F");
  outtree_->Branch("r9Full5x5",           &r9Full5x5,           "r9Full5x5/F");
  
  //outtree_->Branch("HoverE_Lwp",       &HoverE_Lwp, "HoverE_Lwp/F");
  //outtree_->Branch("sieieFull5x5_Lwp", &sieieFull5x5_Lwp, "sieieFull5x5_Lwp/F");
  //outtree_->Branch("chIso_Lwp",        &chIso_Lwp, "chIso_Lwp/F");
  //outtree_->Branch("phoIso_Lwp",       &phoIso_Lwp, "phoIso_Lwp/F");
  //outtree_->Branch("nhIso_Lwp",        &nhIso_Lwp, "nhIso_Lwp/F");
    
  outtree_->Branch("HoverE_Mwp",       &HoverE_Mwp, "HoverE_Mwp/F");
  outtree_->Branch("r9Full5x5_Mwp",    &r9Full5x5_Mwp, "r9Full5x5_Mwp/F");
  outtree_->Branch("sieieFull5x5_Mwp", &sieieFull5x5_Mwp, "sieieFull5x5_Mwp/F");
  outtree_->Branch("sieipFull5x5_Mwp", &sieipFull5x5_Mwp, "sieipFull5x5_Mwp/F");
  outtree_->Branch("sipipFull5x5_Mwp", &sipipFull5x5_Mwp, "sipipFull5x5_Mwp/F");
  outtree_->Branch("chIso_Mwp",        &chIso_Mwp, "chIso_Mwp/F");
  outtree_->Branch("phoIso_Mwp",       &phoIso_Mwp, "phoIso_Mwp/F");
  outtree_->Branch("nhIso_Mwp",        &nhIso_Mwp, "nhIso_Mwp/F");
  outtree_->Branch("chWorst_Mwp",      &chWorst_Mwp, "chWorst_Mwp/F");
  
  //outtree_->Branch("HoverE_Twp",       &HoverE_Twp, "HoverE_Twp/F");
  //outtree_->Branch("sieieFull5x5_Twp", &sieieFull5x5_Twp, "sieieFull5x5_Twp/F");
  //outtree_->Branch("chIso_Twp",        &chIso_Twp, "chIso_Twp/F");
  //outtree_->Branch("phoIso_Twp",       &phoIso_Twp, "phoIso_Twp/F");
  //outtree_->Branch("nhIso_Twp",        &nhIso_Twp, "nhIso_Twp/F");

  //***********************Loop***********************//
  for (Long64_t ev = 0; ev < data.GetEntriesFast(); ev++) {
    if (ev % 100000 == 0){
      fprintf(stderr, "Processing event %lli of %lli (%.3f \%)\n", ev+1, data.GetEntriesFast(), (ev+1)*100./data.GetEntriesFast());
    }

    data.GetEntry(ev);
    run     = data.GetInt("run");
    event   = data.GetLong64("event"); 
    isData = data.GetBool("isData");
    isPVGood = data.GetBool("isPVGood");
    nVtx = data.GetInt("nVtx");
    
    Int_t nPho     = data.GetInt("nPho");
    Int_t nJet     = data.GetInt("nJet");
    h_npho->Fill(nPho);

    //reco
    Float_t* phoE = 0; 
    Float_t* phoEt = 0;
    Float_t* phoEta = 0;
    Float_t* phoPhi = 0;
    Float_t* phoR9  = 0;
    Float_t* phoHoverE = 0; 
    Float_t* phoPFChIso          = 0; 
    Float_t* phoPFNeuIso         = 0; 
    Float_t* phoPFPhoIso         = 0; 
    Int_t*   phoEleVeto          = 0; 
    Float_t* phoSigmaIEtaIEtaFull5x5  = 0;
    Float_t* phoSigmaIEtaIPhiFull5x5  = 0;
    Float_t* phoSigmaIPhiIPhiFull5x5  = 0;
    Float_t* phoR9Full5x5           = 0;
    Float_t* phoPFChWorst   = 0; 
    Float_t  rho                    = 0; 
    Short_t* phoID         = 0;
    Long64_t* phoFiredTrgs = 0;
    Float_t* phoSeedTime = 0;
    Float_t* phoSeedEnergy = 0;
    Float_t* phoMIPTotEnergy= 0;

    
    phoE = data.GetPtrFloat("phoE");
    phoEt = data.GetPtrFloat("phoEt");
    phoEta = data.GetPtrFloat("phoEta");
    phoPhi = data.GetPtrFloat("phoPhi");
    phoR9  = data.GetPtrFloat("phoR9");
    phoHoverE = data.GetPtrFloat("phoHoverE");
    phoPFChIso          = data.GetPtrFloat("phoPFChIso");
    phoPFNeuIso         = data.GetPtrFloat("phoPFNeuIso");
    phoPFPhoIso         = data.GetPtrFloat("phoPFPhoIso");
    phoEleVeto          = data.GetPtrInt("phoEleVeto");
    phoSigmaIEtaIEtaFull5x5  = data.GetPtrFloat("phoSigmaIEtaIEtaFull5x5");
    phoSigmaIEtaIPhiFull5x5  = data.GetPtrFloat("phoSigmaIEtaIPhiFull5x5");
    phoSigmaIPhiIPhiFull5x5  = data.GetPtrFloat("phoSigmaIPhiIPhiFull5x5");
    phoR9Full5x5           = data.GetPtrFloat("phoR9Full5x5");
    phoPFChWorst             = data.GetPtrFloat("phoPFChWorstIso");
    rho                    = data.GetFloat("rho");
    phoID         = data.GetPtrShort("phoIDbit");
    phoFiredTrgs  = data.GetPtrLong64("phoFiredSingleTrgs");

    if(isData==1){
      phoSeedTime = data.GetPtrFloat("phoSeedTime");
      phoSeedEnergy = data.GetPtrFloat("phoSeedEnergy");
      phoMIPTotEnergy = data.GetPtrFloat("phoMIPTotEnergy");
    }

    //rho correction
    vector<vector<Float_t>> Iso_raw; //[ch, pho, nh, chw]
    vector<vector<Float_t>> Iso_rc; //[ch, pho, nh, chw]
    Iso_raw.clear();
    Iso_rc.clear();
    for(Int_t iso = 0; iso < 4; iso++){
      vector <Float_t> isolist;
      rhoCorrection(iso, data, isolist);
      Iso_rc.push_back(isolist);
      vector<Float_t> oisolist;
      rawIsolation(iso, data, oisolist);
      Iso_raw.push_back(oisolist);
    }

    //MC 
    Int_t    nMC   =0;     
    Int_t*   mcPID =0;
    Int_t*   mcMomPID =0;
    Float_t* mcPt      =0;
    Float_t* mcEta     =0;
    Float_t* mcPhi     =0;
    Float_t* mcE       =0;
    Float_t* mcEt      =0;
    Float_t* mcMass    =0;
    Short_t* mcStatus  =0;

    Float_t* mcMomMass =0;
    Float_t* mcMomPt   =0;
    Float_t* mcMomEta  =0;
    Float_t* mcMomPhi  =0;
    Float_t* mcMomE    =0;

    Float_t genMET =0;
    Float_t genMETPhi =0;
    Float_t pfMET =0;
    Float_t pfMETPhi =0;

    if(!isData){
      nMC       = data.GetInt("nMC");
      mcPID     = data.GetPtrInt("mcPID");
      
      mcPt      = data.GetPtrFloat("mcPt");
      mcEta     = data.GetPtrFloat("mcEta");
      mcPhi     = data.GetPtrFloat("mcPhi");
      mcE       = data.GetPtrFloat("mcE");
      mcMass    = data.GetPtrFloat("mcMass");
      mcStatus  = data.GetPtrShort("mcStatusFlag");

      mcMomPID  = data.GetPtrInt("mcMomPID");
      mcMomMass = data.GetPtrFloat("mcMomMass");
      mcMomPt   = data.GetPtrFloat("mcMomPt");
      mcMomEta  = data.GetPtrFloat("mcMomEta");
      mcMomPhi  = data.GetPtrFloat("mcMomPhi");

      genMET    = data.GetFloat("genMET");
      genMETPhi = data.GetFloat("genMETPhi");
      pfMET     = data.GetFloat("pfMET");
      pfMETPhi  = data.GetFloat("pfMETPhi");
      h_genMET->Fill(genMET);
      h_genMETPhi->Fill(genMETPhi);
      h_MET->Fill(pfMET);
      h_METPhi->Fill(pfMETPhi);
    }
    

    //get mc photon id
    vector<Int_t> mc_phoid; mc_phoid.clear();
    Int_t nMCpho =0;
    for(Int_t k=0; k < nMC; k++){
      if(fabs(mcMomPID[k]) >= 25) continue;
      if(fabs(mcMomPID[k]) > 6 && fabs(mcMomPID[k]) < 22) continue;
      if((mcStatus[k]>>1&1) == 0) continue;
      if(mcPID[k] == 22){
	mc_phoid.push_back(k);
	nMCpho++;
      }
    }
    h_nmcpho->Fill(nMCpho);

    //gen-matching
    vector <Int_t> matchpho_list; matchpho_list.clear();
    vector <Int_t> match;
    Int_t nmatchpho=0;
    Int_t isMatched;
    for(Int_t ipho=0; ipho < nPho; ipho++){
      //if(phoEt[ipho] < 165.) continue;
      isMatched = 0;
      for(Int_t nn=0; nn < nMCpho; nn++){
	Int_t k = mc_phoid[nn];
	Float_t dr = deltaR(phoEta[ipho], phoPhi[ipho], mcEta[k], mcPhi[k]);
	Float_t dpt = fabs((phoEt[ipho] - mcPt[k])/mcPt[k]);
	h_dptdr_pho->Fill(dr, dpt);
	if(dr < 0.1) h_dpt_pho->Fill(dpt);
	if(dpt < 0.2) h_dr_pho->Fill(dr);
	if(dr < 0.1 && dpt < 0.2){
	  isMatched = 1;
	  //printf("MC phomatched !");
	  matchpho_list.push_back(ipho);
	  nmatchpho++;
	  break;
	}
      }
      match.push_back(isMatched);
    }
    h_matchpho->Fill(nmatchpho);

    vector<Int_t> cutIDpho_list; cutIDpho_list.clear();//Medium Id
    vector<Int_t> realphoEB_list; realphoEB_list.clear();
    vector<Int_t> realphoEE_list; realphoEE_list.clear();
    phoIDcut(1, data, cutIDpho_list);
    //phoIDcut(1, data, matchpho_list, realphoEB_list);
    //phoIDcut(1, data, matchpho_list, realphoEE_list);

    Int_t nrealEBpho;
    Int_t nrealEBpho_M;
    for(Int_t ipho=0; ipho<nPho; ipho++){
      
      if(isPVGood ==1 && isMatched ==1){
	if(fabs(phoEta[ipho]) < 1.4442){
	  h_realphoEB_pt_var->Fill(phoEt[ipho]);
	  h_realphoEB_eta_var->Fill(phoEta[ipho]);
	  h_dphoMETPhi->Fill(deltaPhi(phoPhi[ipho], pfMETPhi));

	  r9Full5x5    =  phoR9Full5x5[ipho];
	  HoverE       =  phoHoverE[ipho];
	  sieieFull5x5 =  phoSigmaIEtaIEtaFull5x5[ipho];
	  sieipFull5x5 =  phoSigmaIEtaIPhiFull5x5[ipho];
	  sipipFull5x5 =  phoSigmaIPhiIPhiFull5x5[ipho];
	  chIso    = Iso_raw[0][ipho];
	  phoIso   = Iso_raw[1][ipho];
	  nhIso    = Iso_raw[2][ipho];
	  chWorst  = Iso_raw[3][ipho];
	  chIso_   = Iso_rc[0][ipho];
	  phoIso_  = Iso_rc[1][ipho];
	  nhIso_   = Iso_rc[2][ipho];
	  chWorst_ = Iso_rc[3][ipho];
	  realphoEB_list.push_back(ipho);
	  nrealEBpho++;
	  
	  if(cutIDpho_list[ipho] ==1 && fabs(deltaPhi(phoPhi[ipho], pfMETPhi)) > 2){
	  //if(cutIDpho_list[ipho] == 1){
	    h_realphoEB_pt_M_var->Fill(phoEt[ipho]);
	    h_realphoEB_eta_M_var->Fill(phoEta[ipho]);

	    mcphoEt = mcPt[ipho];
	    mcphoEta = mcEta[ipho];
	    mcphoPhi = mcPhi[ipho];
	    realphoEt = phoEt[ipho];
	    realphoEta = phoEta[ipho];
	    realphoPhi = phoPhi[ipho];
      
	    r9Full5x5_Mwp = phoR9Full5x5[ipho];
	    HoverE_Mwp = phoHoverE[ipho];
	    sieieFull5x5_Mwp = phoSigmaIEtaIEtaFull5x5[ipho];
	    sieipFull5x5_Mwp = phoSigmaIEtaIPhiFull5x5[ipho];
	    sipipFull5x5_Mwp = phoSigmaIPhiIPhiFull5x5[ipho];
	    chIso_Mwp = Iso_rc[0][ipho];
	    phoIso_Mwp = Iso_rc[1][ipho];
	    nhIso_Mwp = Iso_rc[2][ipho];
	    chWorst_Mwp = Iso_rc[3][ipho];
	    nrealEBpho_M++;
	  }
	  else nrealEBpho_M += 0;
	}
	else nrealEBpho += 0;
      }
      else{
	mcphoEt = -999;
	mcphoEta = -999;
	mcphoPhi = -999;
	realphoEt = -999;
	realphoEta = -999;
	realphoPhi = -999;
	HoverE_Mwp = -999;
	r9Full5x5_Mwp = -999;
	sieieFull5x5_Mwp = -999;
	sieipFull5x5_Mwp = -999;
	sipipFull5x5_Mwp = -999;
	chIso_Mwp = -999;
	phoIso_Mwp = -999;
	nhIso_Mwp = -999;
	chWorst_Mwp = -999;
      }
      outtree_->Fill();
    }
    h_nrealphoEB->Fill(nrealEBpho);
    h_nrealphoEB_M->Fill(nrealEBpho_M);
    
    //EB photon ID cut
    /*
    for(Int_t ii=0; ii<nrealpho; ii++){
      Int_t ipho = realpho_list[ii];
      
      mcphoEt = mcPt[ipho];
      mcphoEta = mcEta[ipho];
      mcphoPhi = mcPhi[ipho];
      recophoEt = phoEt[ipho];
      recophoEta = phoEta[ipho];
      recophoPhi = phoPhi[ipho];
      realphoEt = phoEt[ipho];
      realphoEta = phoEta[ipho];
      realphoPhi = phoPhi[ipho];
      

      if(fabs(phoEta[ipho]) > 1.4442) continue;
      h_realphoEB_pt_var->Fill(phoEt[ipho]);
      h_realphoEB_eta_var->Fill(phoEta[ipho]);
      r9Full5x5 = phoR9Full5x5[ipho];
      HoverE = phoHoverE[ipho];
      sieieFull5x5 = phoSigmaIEtaIEtaFull5x5[ipho];
      chIso = Iso_raw[0][ipho];
      phoIso = Iso_raw[1][ipho];
      nhIso = Iso_raw[2][ipho];
      chIso_ = Iso_rc[0][ipho];
      phoIso_ = Iso_rc[1][ipho];
      nhIso_ = Iso_rc[2][ipho];

      //h_realphoEB_sieie->Fill(phoSigmaIEtaIEtaFull5x5[ipho]);

      if((phoID[ipho]>>0&1)== 1){
	//realphoEB_Lwp_list.push_back(ipho);
	h_realphoEB_pt_L_var->Fill(phoEt[ipho]);
	h_realphoEB_eta_L_var->Fill(phoEta[ipho]);
	HoverE_Lwp = phoHoverE[ipho];
	sieieFull5x5_Lwp = phoSigmaIEtaIEtaFull5x5[ipho];
	chIso_Lwp = Iso_rc[0][ipho];
	phoIso_Lwp = Iso_rc[1][ipho];
	nhIso_Lwp = Iso_rc[2][ipho];
	
	//h_realphoEB_sieie_L->Fill(phoSigmaIEtaIEtaFull5x5[ipho]);
	if((phoID[ipho]>>1&1) == 1){
	  //realphoEB_Mwp_list.push_back(ipho);
	  h_realphoEB_pt_M_var->Fill(phoEt[ipho]);
	  h_realphoEB_eta_M_var->Fill(phoEta[ipho]);
	  HoverE_Mwp = phoHoverE[ipho];
	  sieieFull5x5_Mwp = phoSigmaIEtaIEtaFull5x5[ipho];
	  chIso_Mwp = Iso_rc[0][ipho];
	  phoIso_Mwp = Iso_rc[1][ipho];
	  nhIso_Mwp = Iso_rc[2][ipho];
	  
	  //h_realphoEB_sieie_M->Fill(phoSigmaIEtaIEtaFull5x5[ipho]);
	  if((phoID[ipho]>>2&1) == 1){
	    //realphoEB_Twp_list.push_back(ipho);
	    h_realphoEB_pt_T_var->Fill(phoEt[ipho]);
	    h_realphoEB_eta_T_var->Fill(phoEta[ipho]);
	    HoverE_Twp = phoHoverE[ipho];
	    sieieFull5x5_Twp = phoSigmaIEtaIEtaFull5x5[ipho];
	    chIso_Twp = Iso_rc[0][ipho];
	    phoIso_Twp = Iso_rc[1][ipho];
	    nhIso_Twp = Iso_rc[2][ipho];
	    
	    //h_realphoEB_sieie_T->Fill(phoSigmaIEtaIEtaFull5x5[ipho]);
	  }
	}
      }
      else {
	HoverE_Lwp = -1;
	sieieFull5x5_Lwp = -1;
	chIso_Lwp = -1;
	phoIso_Lwp = -1;
	nhIso_Lwp = -1;

	HoverE_Mwp = -1;
	sieieFull5x5_Mwp = -1;
	chIso_Mwp = -1;
	phoIso_Mwp = -1;
	nhIso_Mwp = -1;

	HoverE_Twp = -1;
	sieieFull5x5_Twp = -1;
	chIso_Twp = -1;
	phoIso_Twp = -1;
	nhIso_Twp = -1;
      }
      outtree_->Fill();
    }
    */
    
  }
  //****************END LOOP**********************//

  //****************Terminate*********************//
  fout_->cd();
  outtree_->Write();

  h_npho->Write();
  h_nmcpho->Write();
  h_matchpho->Write();
  h_dr_pho->Write();
  h_dpt_pho->Write();
  h_dptdr_pho->Write();

  //h_realphoEB_pt_var->Write();
  //h_realphoEB_pt_L_var->Write();
  //h_realphoEB_pt_M_var->Write();
  //h_realphoEB_pt_T_var->Write();
  
  //h_realphoEB_eta_var->Write();
  //h_realphoEB_eta_L_var->Write();
  //h_realphoEB_eta_M_var->Write();
  //h_realphoEB_eta_T_var->Write();
  
  h_realphoEB_pt_var->Write();
  h_realphoEB_eta_var->Write();
  h_realphoEB_pt_M_var->Write();
  h_realphoEB_eta_M_var->Write();
  h_nrealphoEB->Write();
  h_nrealphoEB_M->Write();

  h_genMET->Write();
  h_genMETPhi->Write();
  h_MET->Write();
  h_METPhi->Write();
  h_dphoMETPhi->Write();
  
  //h_realphoEB_sieie->Write();
  //h_realphoEB_sieie_L->Write();
  //h_realphoEB_sieie_M->Write();
  //h_realphoEB_sieie_T->Write();
    
  fout_->Close();
  fprintf(stderr, "Processed all events\n");
  
    
    
}
